{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { getProjects, getProjectStages, getDisciplinesByStage, getActivitiesByDiscipline } from '../../../api/horasApi';\nimport { toast } from 'sonner';\nexport const useProjectData = () => {\n  _s();\n  const [projects, setProjects] = useState([]);\n  const [stages, setStages] = useState([]);\n  const [disciplines, setDisciplines] = useState([]);\n  const [activities, setActivities] = useState([]);\n  const [loading, setLoading] = useState({\n    projects: true,\n    stages: false,\n    disciplines: false,\n    activities: false\n  });\n\n  // Cargar proyectos\n  const fetchProjects = useCallback(async () => {\n    setLoading(prev => ({\n      ...prev,\n      projects: true\n    }));\n    try {\n      const projectData = await getProjects();\n      setProjects(projectData);\n    } catch (error) {\n      console.error('Error al cargar proyectos:', error);\n      toast.error('Error al cargar la lista de proyectos');\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        projects: false\n      }));\n    }\n  }, []);\n\n  // Cargar etapas del proyecto\n  const fetchStages = useCallback(async projectCode => {\n    if (!projectCode) {\n      setStages([]);\n      return [];\n    }\n\n    // Solo mostramos el indicador de carga si no hay etapas cargadas\n    if (stages.length === 0) {\n      setLoading(prev => ({\n        ...prev,\n        stages: true\n      }));\n    }\n    try {\n      const stageData = await getProjectStages(projectCode);\n      const validStages = stageData.filter(stage => stage != null && stage !== '').map(String);\n\n      // Solo actualizamos si hay cambios\n      if (JSON.stringify(validStages) !== JSON.stringify(stages)) {\n        setStages(validStages);\n      }\n      return validStages;\n    } catch (error) {\n      console.error('Error al cargar etapas:', error);\n      // No mostramos el toast para no molestar al usuario\n      return [];\n    } finally {\n      if (loading.stages) {\n        setLoading(prev => ({\n          ...prev,\n          stages: false\n        }));\n      }\n    }\n  }, [stages, loading.stages]);\n\n  // Cargar disciplinas por etapa\n  const fetchDisciplines = useCallback(async (projectCode, stage) => {\n    if (!projectCode || !stage) {\n      setDisciplines([]);\n      return [];\n    }\n\n    // Solo mostramos el indicador de carga si no hay disciplinas cargadas\n    if (disciplines.length === 0) {\n      setLoading(prev => ({\n        ...prev,\n        disciplines: true\n      }));\n    }\n    try {\n      const disciplineData = await getDisciplinesByStage(projectCode, stage);\n      const validDisciplines = disciplineData.filter(discipline => discipline != null && discipline !== '').map(String);\n\n      // Solo actualizamos si hay cambios\n      if (JSON.stringify(validDisciplines) !== JSON.stringify(disciplines)) {\n        setDisciplines(validDisciplines);\n      }\n      return validDisciplines;\n    } catch (error) {\n      console.error('Error al cargar disciplinas:', error);\n      // No mostramos el toast para no molestar al usuario\n      return [];\n    } finally {\n      if (loading.disciplines) {\n        setLoading(prev => ({\n          ...prev,\n          disciplines: false\n        }));\n      }\n    }\n  }, [disciplines, loading.disciplines]);\n\n  // Cargar actividades por disciplina\n  const fetchActivities = useCallback(async (projectCode, stage, discipline) => {\n    if (!projectCode || !stage || !discipline) {\n      setActivities([]);\n      return [];\n    }\n    try {\n      console.log(`Buscando actividades para proyecto: ${projectCode}, etapa: ${stage}, disciplina: ${discipline}`);\n      const activityData = await getActivitiesByDiscipline(projectCode, stage, discipline);\n      console.log('Actividades recibidas de la API:', activityData);\n      const validActivities = activityData.filter(activity => activity != null && activity !== '').map(String);\n      console.log('Actividades válidas después de filtrar:', validActivities);\n\n      // Siempre actualizamos las actividades para asegurar que estén sincronizadas\n      setActivities(validActivities);\n      return validActivities;\n    } catch (error) {\n      console.error('Error al cargar actividades:', error);\n      setActivities([]);\n      return [];\n    }\n  }, []);\n  return {\n    projects,\n    stages,\n    disciplines,\n    activities,\n    loading,\n    fetchProjects,\n    fetchStages,\n    fetchDisciplines,\n    fetchActivities\n  };\n};\n_s(useProjectData, \"DIutAqk+QMYQvmrYUKDmEhpflRE=\");","map":{"version":3,"names":["useState","useCallback","getProjects","getProjectStages","getDisciplinesByStage","getActivitiesByDiscipline","toast","useProjectData","_s","projects","setProjects","stages","setStages","disciplines","setDisciplines","activities","setActivities","loading","setLoading","fetchProjects","prev","projectData","error","console","fetchStages","projectCode","length","stageData","validStages","filter","stage","map","String","JSON","stringify","fetchDisciplines","disciplineData","validDisciplines","discipline","fetchActivities","log","activityData","validActivities","activity"],"sources":["D:/formulario de horas/FormularioHoras Version 1/frontend/src/components/formulario/hooks/useProjectData.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { Project } from '../types';\nimport { getProjects, getProjectStages, getDisciplinesByStage, getActivitiesByDiscipline } from '../../../api/horasApi';\nimport { toast } from 'sonner';\n\nexport const useProjectData = () => {\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [stages, setStages] = useState<string[]>([]);\n  const [disciplines, setDisciplines] = useState<string[]>([]);\n  const [activities, setActivities] = useState<string[]>([]);\n  const [loading, setLoading] = useState({\n    projects: true,\n    stages: false,\n    disciplines: false,\n    activities: false,\n  });\n\n  // Cargar proyectos\n  const fetchProjects = useCallback(async () => {\n    setLoading(prev => ({ ...prev, projects: true }));\n    try {\n      const projectData = await getProjects();\n      setProjects(projectData);\n    } catch (error) {\n      console.error('Error al cargar proyectos:', error);\n      toast.error('Error al cargar la lista de proyectos');\n    } finally {\n      setLoading(prev => ({ ...prev, projects: false }));\n    }\n  }, []);\n\n  // Cargar etapas del proyecto\n  const fetchStages = useCallback(async (projectCode: string) => {\n    if (!projectCode) {\n      setStages([]);\n      return [];\n    }\n    \n    // Solo mostramos el indicador de carga si no hay etapas cargadas\n    if (stages.length === 0) {\n      setLoading(prev => ({ ...prev, stages: true }));\n    }\n    \n    try {\n      const stageData = await getProjectStages(projectCode);\n      const validStages = stageData\n        .filter((stage: any) => stage != null && stage !== '')\n        .map(String);\n      \n      // Solo actualizamos si hay cambios\n      if (JSON.stringify(validStages) !== JSON.stringify(stages)) {\n        setStages(validStages);\n      }\n      \n      return validStages;\n    } catch (error) {\n      console.error('Error al cargar etapas:', error);\n      // No mostramos el toast para no molestar al usuario\n      return [];\n    } finally {\n      if (loading.stages) {\n        setLoading(prev => ({ ...prev, stages: false }));\n      }\n    }\n  }, [stages, loading.stages]);\n\n  // Cargar disciplinas por etapa\n  const fetchDisciplines = useCallback(async (projectCode: string, stage: string) => {\n    if (!projectCode || !stage) {\n      setDisciplines([]);\n      return [];\n    }\n    \n    // Solo mostramos el indicador de carga si no hay disciplinas cargadas\n    if (disciplines.length === 0) {\n      setLoading(prev => ({ ...prev, disciplines: true }));\n    }\n    \n    try {\n      const disciplineData = await getDisciplinesByStage(projectCode, stage);\n      const validDisciplines = disciplineData\n        .filter((discipline: any) => discipline != null && discipline !== '')\n        .map(String);\n      \n      // Solo actualizamos si hay cambios\n      if (JSON.stringify(validDisciplines) !== JSON.stringify(disciplines)) {\n        setDisciplines(validDisciplines);\n      }\n      \n      return validDisciplines;\n    } catch (error) {\n      console.error('Error al cargar disciplinas:', error);\n      // No mostramos el toast para no molestar al usuario\n      return [];\n    } finally {\n      if (loading.disciplines) {\n        setLoading(prev => ({ ...prev, disciplines: false }));\n      }\n    }\n  }, [disciplines, loading.disciplines]);\n\n  // Cargar actividades por disciplina\n  const fetchActivities = useCallback(async (projectCode: string, stage: string, discipline: string) => {\n    if (!projectCode || !stage || !discipline) {\n      setActivities([]);\n      return [];\n    }\n    \n    try {\n      console.log(`Buscando actividades para proyecto: ${projectCode}, etapa: ${stage}, disciplina: ${discipline}`);\n      const activityData = await getActivitiesByDiscipline(projectCode, stage, discipline);\n      console.log('Actividades recibidas de la API:', activityData);\n      \n      const validActivities = activityData\n        .filter((activity: any) => activity != null && activity !== '')\n        .map(String);\n      \n      console.log('Actividades válidas después de filtrar:', validActivities);\n      \n      // Siempre actualizamos las actividades para asegurar que estén sincronizadas\n      setActivities(validActivities);\n      \n      return validActivities;\n    } catch (error) {\n      console.error('Error al cargar actividades:', error);\n      setActivities([]);\n      return [];\n    }\n  }, []);\n\n  return {\n    projects,\n    stages,\n    disciplines,\n    activities,\n    loading,\n    fetchProjects,\n    fetchStages,\n    fetchDisciplines,\n    fetchActivities,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}