{"ast":null,"code":"// horasApi.ts\nimport axios from 'axios';\nconst API_BASE_URL = 'http://backend.yeisonduque.top';\nexport const submitHours = async data => {\n  try {\n    // Preparar los datos para enviar\n    const payload = {\n      project_code: data.project_code,\n      phase: data.phase,\n      discipline: data.discipline,\n      activity: data.activity,\n      hours: data.hours,\n      date: data.date,\n      employee_id: data.employee_id,\n      note: data.note || ''\n    };\n    if (data.id) {\n      // Para actualización, usar la función updateHour\n      console.log('Actualizando hora con datos:', {\n        id: data.id,\n        payload\n      });\n      return await updateHour(String(data.id), payload);\n    } else {\n      // Para creación, hacer POST directo\n      console.log('Creando nueva hora con datos:', payload);\n      const response = await axios.post(`${API_BASE_URL}/hours/`, payload);\n      return response.data;\n    }\n  } catch (error) {\n    console.error('Error al enviar las horas:', error);\n    // Mostrar el error del servidor si está disponible\n    if (axios.isAxiosError(error) && error.response) {\n      console.error('Detalles del error:', error.response.data);\n      // Si hay un mensaje de error del servidor, mostrarlo\n      if (error.response.data && error.response.data.detail) {\n        throw new Error(error.response.data.detail);\n      }\n    }\n    throw error;\n  }\n};\nexport const getProjects = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/projects/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener proyectos:', error);\n    throw error;\n  }\n};\nexport const getEmployees = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/employees/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener empleados:', error);\n    throw error;\n  }\n};\nexport const getDisciplinesByStage = async (projectCode, stage) => {\n  try {\n    const params = [encodeURIComponent(projectCode), encodeURIComponent(stage)].join('::');\n    const response = await axios.get(`${API_BASE_URL}/activities/${params}/disciplines`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error al obtener disciplinas para el proyecto ${projectCode}, etapa ${stage}:`, error);\n    throw error;\n  }\n};\nexport const getActivitiesByDiscipline = async (projectCode, stage, discipline) => {\n  try {\n    const params = [encodeURIComponent(projectCode), encodeURIComponent(stage), encodeURIComponent(discipline)].join('::');\n    const response = await axios.get(`${API_BASE_URL}/activities/${params}/activities`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error al obtener actividades para el proyecto ${projectCode}, etapa ${stage}, disciplina ${discipline}:`, error);\n    throw error;\n  }\n};\nexport const getDailyActivities = async (date, employeeId) => {\n  try {\n    // Convertir la fecha a formato YYYY-MM-DD si es un objeto Date\n    const dateStr = date instanceof Date ? date.toISOString().split('T')[0] : date;\n\n    // Asegurarse de que employeeId sea un número\n    const employeeIdNum = typeof employeeId === 'string' ? parseInt(employeeId, 10) : employeeId;\n    console.log(`Obteniendo actividades para la fecha ${dateStr} y empleado ${employeeIdNum}`);\n    const response = await axios.get(`${API_BASE_URL}/daily-activities`, {\n      params: {\n        date: dateStr,\n        employee_id: employeeIdNum\n      },\n      validateStatus: status => status >= 200 && status < 300\n    });\n    console.log(`Actividades obtenidas:`, response.data);\n    return response.data || [];\n  } catch (error) {\n    console.error('Error al obtener las actividades del día:', error);\n\n    // Proporcionar un mensaje de error más descriptivo\n    let errorMessage = 'Error al cargar las actividades';\n    if (axios.isAxiosError(error)) {\n      if (error.response) {\n        var _error$response$data;\n        // El servidor respondió con un código de estado fuera del rango 2xx\n        errorMessage = `Error del servidor (${error.response.status}): ${((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message}`;\n      } else if (error.request) {\n        // La solicitud fue hecha pero no se recibió respuesta\n        errorMessage = 'No se pudo conectar con el servidor. Verifica tu conexión a internet.';\n      } else {\n        // Algo pasó al configurar la solicitud\n        errorMessage = `Error al configurar la solicitud: ${error.message}`;\n      }\n    }\n\n    // Lanzar un error con el mensaje apropiado\n    throw new Error(errorMessage);\n  }\n};\n\n// horasApi.ts\nexport const getProjectStages = async projectCode => {\n  try {\n    const encodedProjectCode = encodeURIComponent(projectCode);\n    // Usa el nuevo endpoint en activities\n    const response = await axios.get(`${API_BASE_URL}/activities/project/${encodedProjectCode}/stages`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error al obtener etapas para el proyecto ${projectCode}:`, error);\n    throw error;\n  }\n};\n\n// Interfaz para los datos de actualización de horas\n\nexport const updateHour = async (hourId, data) => {\n  try {\n    // Asegurarse de que los tipos sean correctos\n    const payload = {\n      project_code: data.project_code,\n      phase: data.phase,\n      discipline: data.discipline,\n      activity: data.activity,\n      hours: typeof data.hours === 'string' ? parseFloat(data.hours.replace(',', '.')) : data.hours,\n      date: data.date,\n      employee_id: typeof data.employee_id === 'string' ? parseInt(data.employee_id, 10) : data.employee_id,\n      note: data.note || ''\n    };\n    console.log('Enviando datos de actualización:', {\n      hourId,\n      payload\n    });\n    const response = await axios.put(`${API_BASE_URL}/hours/${hourId}`, payload);\n    return response.data;\n  } catch (error) {\n    console.error('Error al actualizar la hora:', error);\n    if (axios.isAxiosError(error) && error.response) {\n      console.error('Detalles del error:', error.response.data);\n      // Si el servidor devuelve un mensaje de error, usarlo\n      if (error.response.data && error.response.data.detail) {\n        throw new Error(error.response.data.detail);\n      }\n    }\n    throw error;\n  }\n};\nexport const deleteHour = async hourId => {\n  try {\n    const response = await axios.delete(`${API_BASE_URL}/hours/${hourId}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error al eliminar el registro de horas ${hourId}:`, error);\n    throw error;\n  }\n};\nexport const getProjectByCode = async projectCode => {\n  try {\n    const encodedProjectCode = encodeURIComponent(projectCode);\n    const response = await axios.get(`${API_BASE_URL}/projects/${encodedProjectCode}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error al obtener proyecto ${projectCode}:`, error);\n    throw error;\n  }\n};\nexport const loginUser = async credentials => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/auth/login`, credentials);\n    return response.data;\n  } catch (error) {\n    console.error('Error en el inicio de sesión:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","submitHours","data","payload","project_code","phase","discipline","activity","hours","date","employee_id","note","id","console","log","updateHour","String","response","post","error","isAxiosError","detail","Error","getProjects","get","getEmployees","getDisciplinesByStage","projectCode","stage","params","encodeURIComponent","join","getActivitiesByDiscipline","getDailyActivities","employeeId","dateStr","Date","toISOString","split","employeeIdNum","parseInt","validateStatus","status","errorMessage","_error$response$data","message","request","getProjectStages","encodedProjectCode","hourId","parseFloat","replace","put","deleteHour","delete","getProjectByCode","loginUser","credentials"],"sources":["D:/formulario de horas/FormularioHoras Version 1/frontend/src/api/horasApi.ts"],"sourcesContent":["// horasApi.ts\nimport axios from 'axios';\n\nconst API_BASE_URL = 'http://backend.yeisonduque.top';\n\nexport interface HourData {\n  project_code: string;\n  phase: string;\n  discipline: string;\n  activity: string;\n  hours: number;\n  note?: string;\n  date: string;\n  employee_id: number;\n  id?: string | number;\n}\n\nexport const submitHours = async (data: HourData) => {\n    try {\n        // Preparar los datos para enviar\n        const payload: any = {\n            project_code: data.project_code,\n            phase: data.phase,\n            discipline: data.discipline,\n            activity: data.activity,\n            hours: data.hours,\n            date: data.date,\n            employee_id: data.employee_id,\n            note: data.note || ''\n        };\n\n        if (data.id) {\n            // Para actualización, usar la función updateHour\n            console.log('Actualizando hora con datos:', { id: data.id, payload });\n            return await updateHour(String(data.id), payload);\n        } else {\n            // Para creación, hacer POST directo\n            console.log('Creando nueva hora con datos:', payload);\n            const response = await axios.post(`${API_BASE_URL}/hours/`, payload);\n            return response.data;\n        }\n    } catch (error) {\n        console.error('Error al enviar las horas:', error);\n        // Mostrar el error del servidor si está disponible\n        if (axios.isAxiosError(error) && error.response) {\n            console.error('Detalles del error:', error.response.data);\n            // Si hay un mensaje de error del servidor, mostrarlo\n            if (error.response.data && error.response.data.detail) {\n                throw new Error(error.response.data.detail);\n            }\n        }\n        throw error;\n    }\n};\n\nexport const getProjects = async () => {\n    try {\n        const response = await axios.get(`${API_BASE_URL}/projects/`);\n        return response.data;\n    } catch (error) {\n        console.error('Error al obtener proyectos:', error);\n        throw error;\n    }\n};\n\nexport const getEmployees = async () => {\n    try {\n        const response = await axios.get(`${API_BASE_URL}/employees/`);\n        return response.data;\n    } catch (error) {\n        console.error('Error al obtener empleados:', error);\n        throw error;\n    }\n};\n\nexport const getDisciplinesByStage = async (projectCode: string, stage: string) => {\n  try {\n    const params = [\n      encodeURIComponent(projectCode),\n      encodeURIComponent(stage)\n    ].join('::');\n\n    const response = await axios.get(\n      `${API_BASE_URL}/activities/${params}/disciplines`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(`Error al obtener disciplinas para el proyecto ${projectCode}, etapa ${stage}:`, error);\n    throw error;\n  }\n};\n\nexport const getActivitiesByDiscipline = async (\n  projectCode: string, \n  stage: string, \n  discipline: string\n) => {\n  try {\n    const params = [\n      encodeURIComponent(projectCode),\n      encodeURIComponent(stage),\n      encodeURIComponent(discipline)\n    ].join('::');\n    \n    const response = await axios.get(\n      `${API_BASE_URL}/activities/${params}/activities`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(`Error al obtener actividades para el proyecto ${projectCode}, etapa ${stage}, disciplina ${discipline}:`, error);\n    throw error;\n  }\n};\n\nexport interface DailyActivity {\n  id: string;\n  date: string;\n  employee_id: number;\n  project_code: string;\n  project_name: string;\n  phase: string;\n  discipline: string;\n  activity: string;\n  hours: number;\n  note?: string;\n}\n\nexport const getDailyActivities = async (date: Date | string, employeeId: number | string): Promise<DailyActivity[]> => {\n    try {\n        // Convertir la fecha a formato YYYY-MM-DD si es un objeto Date\n        const dateStr = date instanceof Date \n            ? date.toISOString().split('T')[0] \n            : date;\n        \n        // Asegurarse de que employeeId sea un número\n        const employeeIdNum = typeof employeeId === 'string' \n            ? parseInt(employeeId, 10) \n            : employeeId;\n            \n        console.log(`Obteniendo actividades para la fecha ${dateStr} y empleado ${employeeIdNum}`);\n            \n        const response = await axios.get<DailyActivity[]>(`${API_BASE_URL}/daily-activities`, {\n            params: { \n                date: dateStr, \n                employee_id: employeeIdNum \n            },\n            validateStatus: status => status >= 200 && status < 300\n        });\n        \n        console.log(`Actividades obtenidas:`, response.data);\n        return response.data || [];\n        \n    } catch (error) {\n        console.error('Error al obtener las actividades del día:', error);\n        \n        // Proporcionar un mensaje de error más descriptivo\n        let errorMessage = 'Error al cargar las actividades';\n        \n        if (axios.isAxiosError(error)) {\n            if (error.response) {\n                // El servidor respondió con un código de estado fuera del rango 2xx\n                errorMessage = `Error del servidor (${error.response.status}): ${error.response.data?.detail || error.message}`;\n            } else if (error.request) {\n                // La solicitud fue hecha pero no se recibió respuesta\n                errorMessage = 'No se pudo conectar con el servidor. Verifica tu conexión a internet.';\n            } else {\n                // Algo pasó al configurar la solicitud\n                errorMessage = `Error al configurar la solicitud: ${error.message}`;\n            }\n        }\n        \n        // Lanzar un error con el mensaje apropiado\n        throw new Error(errorMessage);\n    }\n};\n\n// horasApi.ts\nexport const getProjectStages = async (projectCode: string) => {\n  try {\n    const encodedProjectCode = encodeURIComponent(projectCode);\n    // Usa el nuevo endpoint en activities\n    const response = await axios.get(\n      `${API_BASE_URL}/activities/project/${encodedProjectCode}/stages`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(`Error al obtener etapas para el proyecto ${projectCode}:`, error);\n    throw error;\n  }\n};\n\n// Interfaz para los datos de actualización de horas\nexport interface UpdateHourData {\n  project_code: string;\n  phase: string;\n  discipline: string;\n  activity: string;\n  hours: number | string;\n  note?: string;\n  date: string;\n  employee_id: number | string;\n}\n\nexport const updateHour = async (hourId: string, data: UpdateHourData) => {\n  try {\n    // Asegurarse de que los tipos sean correctos\n    const payload: any = {\n      project_code: data.project_code,\n      phase: data.phase,\n      discipline: data.discipline,\n      activity: data.activity,\n      hours: typeof data.hours === 'string' ? \n        parseFloat(data.hours.replace(',', '.')) : \n        data.hours,\n      date: data.date,\n      employee_id: typeof data.employee_id === 'string' ? \n        parseInt(data.employee_id, 10) : \n        data.employee_id,\n      note: data.note || ''\n    };\n    \n    console.log('Enviando datos de actualización:', { hourId, payload });\n    \n    const response = await axios.put(`${API_BASE_URL}/hours/${hourId}`, payload);\n    return response.data;\n  } catch (error) {\n    console.error('Error al actualizar la hora:', error);\n    if (axios.isAxiosError(error) && error.response) {\n      console.error('Detalles del error:', error.response.data);\n      // Si el servidor devuelve un mensaje de error, usarlo\n      if (error.response.data && error.response.data.detail) {\n        throw new Error(error.response.data.detail);\n      }\n    }\n    throw error;\n  }\n};\n\nexport const deleteHour = async (hourId: number) => {\n  try {\n    const response = await axios.delete(`${API_BASE_URL}/hours/${hourId}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error al eliminar el registro de horas ${hourId}:`, error);\n    throw error;\n  }\n};\n\nexport const getProjectByCode = async (projectCode: string) => {\n  try {\n    const encodedProjectCode = encodeURIComponent(projectCode);\n    const response = await axios.get(\n      `${API_BASE_URL}/projects/${encodedProjectCode}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(`Error al obtener proyecto ${projectCode}:`, error);\n    throw error;\n  }\n};\n\nexport const loginUser = async (credentials: any) => {\n    try {\n        const response = await axios.post(`${API_BASE_URL}/auth/login`, credentials);\n        return response.data;\n    } catch (error) {\n        console.error('Error en el inicio de sesión:', error);\n        throw error;\n    }\n};"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,gCAAgC;AAcrD,OAAO,MAAMC,WAAW,GAAG,MAAOC,IAAc,IAAK;EACjD,IAAI;IACA;IACA,MAAMC,OAAY,GAAG;MACjBC,YAAY,EAAEF,IAAI,CAACE,YAAY;MAC/BC,KAAK,EAAEH,IAAI,CAACG,KAAK;MACjBC,UAAU,EAAEJ,IAAI,CAACI,UAAU;MAC3BC,QAAQ,EAAEL,IAAI,CAACK,QAAQ;MACvBC,KAAK,EAAEN,IAAI,CAACM,KAAK;MACjBC,IAAI,EAAEP,IAAI,CAACO,IAAI;MACfC,WAAW,EAAER,IAAI,CAACQ,WAAW;MAC7BC,IAAI,EAAET,IAAI,CAACS,IAAI,IAAI;IACvB,CAAC;IAED,IAAIT,IAAI,CAACU,EAAE,EAAE;MACT;MACAC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE;QAAEF,EAAE,EAAEV,IAAI,CAACU,EAAE;QAAET;MAAQ,CAAC,CAAC;MACrE,OAAO,MAAMY,UAAU,CAACC,MAAM,CAACd,IAAI,CAACU,EAAE,CAAC,EAAET,OAAO,CAAC;IACrD,CAAC,MAAM;MACH;MACAU,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEX,OAAO,CAAC;MACrD,MAAMc,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAC,GAAGlB,YAAY,SAAS,EAAEG,OAAO,CAAC;MACpE,OAAOc,QAAQ,CAACf,IAAI;IACxB;EACJ,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACZN,OAAO,CAACM,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD;IACA,IAAIpB,KAAK,CAACqB,YAAY,CAACD,KAAK,CAAC,IAAIA,KAAK,CAACF,QAAQ,EAAE;MAC7CJ,OAAO,CAACM,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACF,QAAQ,CAACf,IAAI,CAAC;MACzD;MACA,IAAIiB,KAAK,CAACF,QAAQ,CAACf,IAAI,IAAIiB,KAAK,CAACF,QAAQ,CAACf,IAAI,CAACmB,MAAM,EAAE;QACnD,MAAM,IAAIC,KAAK,CAACH,KAAK,CAACF,QAAQ,CAACf,IAAI,CAACmB,MAAM,CAAC;MAC/C;IACJ;IACA,MAAMF,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMI,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAMlB,KAAK,CAACyB,GAAG,CAAC,GAAGxB,YAAY,YAAY,CAAC;IAC7D,OAAOiB,QAAQ,CAACf,IAAI;EACxB,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACZN,OAAO,CAACM,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMM,YAAY,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAMlB,KAAK,CAACyB,GAAG,CAAC,GAAGxB,YAAY,aAAa,CAAC;IAC9D,OAAOiB,QAAQ,CAACf,IAAI;EACxB,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACZN,OAAO,CAACM,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMO,qBAAqB,GAAG,MAAAA,CAAOC,WAAmB,EAAEC,KAAa,KAAK;EACjF,IAAI;IACF,MAAMC,MAAM,GAAG,CACbC,kBAAkB,CAACH,WAAW,CAAC,EAC/BG,kBAAkB,CAACF,KAAK,CAAC,CAC1B,CAACG,IAAI,CAAC,IAAI,CAAC;IAEZ,MAAMd,QAAQ,GAAG,MAAMlB,KAAK,CAACyB,GAAG,CAC9B,GAAGxB,YAAY,eAAe6B,MAAM,cACtC,CAAC;IACD,OAAOZ,QAAQ,CAACf,IAAI;EACtB,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,iDAAiDQ,WAAW,WAAWC,KAAK,GAAG,EAAET,KAAK,CAAC;IACrG,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMa,yBAAyB,GAAG,MAAAA,CACvCL,WAAmB,EACnBC,KAAa,EACbtB,UAAkB,KACf;EACH,IAAI;IACF,MAAMuB,MAAM,GAAG,CACbC,kBAAkB,CAACH,WAAW,CAAC,EAC/BG,kBAAkB,CAACF,KAAK,CAAC,EACzBE,kBAAkB,CAACxB,UAAU,CAAC,CAC/B,CAACyB,IAAI,CAAC,IAAI,CAAC;IAEZ,MAAMd,QAAQ,GAAG,MAAMlB,KAAK,CAACyB,GAAG,CAC9B,GAAGxB,YAAY,eAAe6B,MAAM,aACtC,CAAC;IACD,OAAOZ,QAAQ,CAACf,IAAI;EACtB,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,iDAAiDQ,WAAW,WAAWC,KAAK,gBAAgBtB,UAAU,GAAG,EAAEa,KAAK,CAAC;IAC/H,MAAMA,KAAK;EACb;AACF,CAAC;AAeD,OAAO,MAAMc,kBAAkB,GAAG,MAAAA,CAAOxB,IAAmB,EAAEyB,UAA2B,KAA+B;EACpH,IAAI;IACA;IACA,MAAMC,OAAO,GAAG1B,IAAI,YAAY2B,IAAI,GAC9B3B,IAAI,CAAC4B,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAChC7B,IAAI;;IAEV;IACA,MAAM8B,aAAa,GAAG,OAAOL,UAAU,KAAK,QAAQ,GAC9CM,QAAQ,CAACN,UAAU,EAAE,EAAE,CAAC,GACxBA,UAAU;IAEhBrB,OAAO,CAACC,GAAG,CAAC,wCAAwCqB,OAAO,eAAeI,aAAa,EAAE,CAAC;IAE1F,MAAMtB,QAAQ,GAAG,MAAMlB,KAAK,CAACyB,GAAG,CAAkB,GAAGxB,YAAY,mBAAmB,EAAE;MAClF6B,MAAM,EAAE;QACJpB,IAAI,EAAE0B,OAAO;QACbzB,WAAW,EAAE6B;MACjB,CAAC;MACDE,cAAc,EAAEC,MAAM,IAAIA,MAAM,IAAI,GAAG,IAAIA,MAAM,GAAG;IACxD,CAAC,CAAC;IAEF7B,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEG,QAAQ,CAACf,IAAI,CAAC;IACpD,OAAOe,QAAQ,CAACf,IAAI,IAAI,EAAE;EAE9B,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACZN,OAAO,CAACM,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;;IAEjE;IACA,IAAIwB,YAAY,GAAG,iCAAiC;IAEpD,IAAI5C,KAAK,CAACqB,YAAY,CAACD,KAAK,CAAC,EAAE;MAC3B,IAAIA,KAAK,CAACF,QAAQ,EAAE;QAAA,IAAA2B,oBAAA;QAChB;QACAD,YAAY,GAAG,uBAAuBxB,KAAK,CAACF,QAAQ,CAACyB,MAAM,MAAM,EAAAE,oBAAA,GAAAzB,KAAK,CAACF,QAAQ,CAACf,IAAI,cAAA0C,oBAAA,uBAAnBA,oBAAA,CAAqBvB,MAAM,KAAIF,KAAK,CAAC0B,OAAO,EAAE;MACnH,CAAC,MAAM,IAAI1B,KAAK,CAAC2B,OAAO,EAAE;QACtB;QACAH,YAAY,GAAG,uEAAuE;MAC1F,CAAC,MAAM;QACH;QACAA,YAAY,GAAG,qCAAqCxB,KAAK,CAAC0B,OAAO,EAAE;MACvE;IACJ;;IAEA;IACA,MAAM,IAAIvB,KAAK,CAACqB,YAAY,CAAC;EACjC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMI,gBAAgB,GAAG,MAAOpB,WAAmB,IAAK;EAC7D,IAAI;IACF,MAAMqB,kBAAkB,GAAGlB,kBAAkB,CAACH,WAAW,CAAC;IAC1D;IACA,MAAMV,QAAQ,GAAG,MAAMlB,KAAK,CAACyB,GAAG,CAC9B,GAAGxB,YAAY,uBAAuBgD,kBAAkB,SAC1D,CAAC;IACD,OAAO/B,QAAQ,CAACf,IAAI;EACtB,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,4CAA4CQ,WAAW,GAAG,EAAER,KAAK,CAAC;IAChF,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;;AAYA,OAAO,MAAMJ,UAAU,GAAG,MAAAA,CAAOkC,MAAc,EAAE/C,IAAoB,KAAK;EACxE,IAAI;IACF;IACA,MAAMC,OAAY,GAAG;MACnBC,YAAY,EAAEF,IAAI,CAACE,YAAY;MAC/BC,KAAK,EAAEH,IAAI,CAACG,KAAK;MACjBC,UAAU,EAAEJ,IAAI,CAACI,UAAU;MAC3BC,QAAQ,EAAEL,IAAI,CAACK,QAAQ;MACvBC,KAAK,EAAE,OAAON,IAAI,CAACM,KAAK,KAAK,QAAQ,GACnC0C,UAAU,CAAChD,IAAI,CAACM,KAAK,CAAC2C,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GACxCjD,IAAI,CAACM,KAAK;MACZC,IAAI,EAAEP,IAAI,CAACO,IAAI;MACfC,WAAW,EAAE,OAAOR,IAAI,CAACQ,WAAW,KAAK,QAAQ,GAC/C8B,QAAQ,CAACtC,IAAI,CAACQ,WAAW,EAAE,EAAE,CAAC,GAC9BR,IAAI,CAACQ,WAAW;MAClBC,IAAI,EAAET,IAAI,CAACS,IAAI,IAAI;IACrB,CAAC;IAEDE,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAE;MAAEmC,MAAM;MAAE9C;IAAQ,CAAC,CAAC;IAEpE,MAAMc,QAAQ,GAAG,MAAMlB,KAAK,CAACqD,GAAG,CAAC,GAAGpD,YAAY,UAAUiD,MAAM,EAAE,EAAE9C,OAAO,CAAC;IAC5E,OAAOc,QAAQ,CAACf,IAAI;EACtB,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,IAAIpB,KAAK,CAACqB,YAAY,CAACD,KAAK,CAAC,IAAIA,KAAK,CAACF,QAAQ,EAAE;MAC/CJ,OAAO,CAACM,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACF,QAAQ,CAACf,IAAI,CAAC;MACzD;MACA,IAAIiB,KAAK,CAACF,QAAQ,CAACf,IAAI,IAAIiB,KAAK,CAACF,QAAQ,CAACf,IAAI,CAACmB,MAAM,EAAE;QACrD,MAAM,IAAIC,KAAK,CAACH,KAAK,CAACF,QAAQ,CAACf,IAAI,CAACmB,MAAM,CAAC;MAC7C;IACF;IACA,MAAMF,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMkC,UAAU,GAAG,MAAOJ,MAAc,IAAK;EAClD,IAAI;IACF,MAAMhC,QAAQ,GAAG,MAAMlB,KAAK,CAACuD,MAAM,CAAC,GAAGtD,YAAY,UAAUiD,MAAM,EAAE,CAAC;IACtE,OAAOhC,QAAQ,CAACf,IAAI;EACtB,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,0CAA0C8B,MAAM,GAAG,EAAE9B,KAAK,CAAC;IACzE,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMoC,gBAAgB,GAAG,MAAO5B,WAAmB,IAAK;EAC7D,IAAI;IACF,MAAMqB,kBAAkB,GAAGlB,kBAAkB,CAACH,WAAW,CAAC;IAC1D,MAAMV,QAAQ,GAAG,MAAMlB,KAAK,CAACyB,GAAG,CAC9B,GAAGxB,YAAY,aAAagD,kBAAkB,EAChD,CAAC;IACD,OAAO/B,QAAQ,CAACf,IAAI;EACtB,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,6BAA6BQ,WAAW,GAAG,EAAER,KAAK,CAAC;IACjE,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMqC,SAAS,GAAG,MAAOC,WAAgB,IAAK;EACjD,IAAI;IACA,MAAMxC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAC,GAAGlB,YAAY,aAAa,EAAEyD,WAAW,CAAC;IAC5E,OAAOxC,QAAQ,CAACf,IAAI;EACxB,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACZN,OAAO,CAACM,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}