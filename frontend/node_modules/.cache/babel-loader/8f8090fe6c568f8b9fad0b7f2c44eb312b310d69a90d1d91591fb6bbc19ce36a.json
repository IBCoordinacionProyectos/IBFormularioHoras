{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["D:/formulario de horas/FormularioHoras Version 1/frontend/src/components/formulario/types/index.ts"],"sourcesContent":["// Tipos para los datos del formulario\nexport interface FormData {\n  employee_id: string;\n  project_code: string;\n  phase: string;\n  discipline: string;\n  activity: string;\n  hours: string;\n  note: string;\n}\n\n// Tipos para los proyectos\nexport interface Project {\n  code: string;\n  name: string;\n}\n\n// Tipos para las actividades\nexport interface Activity {\n  id: number;\n  date: string;\n  employee_id: number;\n  project_code: string;\n  project_name: string;\n  phase: string;\n  discipline: string;\n  activity: string;\n  hours: number;\n  note: string;\n}\n\n// Tipos para el estado de carga\nexport interface LoadingState {\n  submit: boolean;\n  projects: boolean;\n  stages: boolean;\n  disciplines: boolean;\n  activities: boolean;\n  dailyActivities: boolean;\n  delete: number | null;\n}\n\n// Tipos para las props del componente principal\nexport interface FormularioHorasProps {\n  onSuccess?: () => void;\n  employeeId: number;\n  employeeName: string;\n  onLogout: () => void;\n}\n\n// Tipos para los selectores de formulario\nexport interface FormSelectProps {\n  label: string;\n  name: string;\n  value: string;\n  onChange: (value: string) => void;\n  options: { value: string; label: string }[];\n  placeholder: string;\n  disabled: boolean;\n  required?: boolean;\n  className?: string;\n}\n\n// Tipos para el componente de lista de actividades\nexport interface ActivityListProps {\n  activities: Activity[];\n  loading: boolean;\n  selectedDate: Date;\n  onEdit: (activity: Activity) => void;\n  onDelete: (id: number) => void;\n  deleteLoadingId: number | null;\n}\n\n// Tipos para el componente de progreso de horas\nexport interface TotalHoursProgressProps {\n  totalHours: number;\n  targetHours: number;\n  className?: string;\n}\n\n// Tipos para el componente de selector de fecha\nexport interface DateSelectorProps {\n  selectedDate: Date;\n  onSelect: (date: Date | undefined) => void;\n  className?: string;\n}\n\n// Tipos para el hook de datos del proyecto\nexport interface ProjectDataHook {\n  projects: Project[];\n  stages: string[];\n  disciplines: string[];\n  activities: string[];\n  loading: {\n    projects: boolean;\n    stages: boolean;\n    disciplines: boolean;\n    activities: boolean;\n  };\n  fetchProjects: () => Promise<void>;\n  fetchStages: (projectCode: string) => Promise<string[]>;\n  fetchDisciplines: (projectCode: string, stage: string) => Promise<string[]>;\n  fetchActivities: (projectCode: string, stage: string, discipline: string) => Promise<string[]>;\n}\n\n// Tipos para el hook de actividades\nexport interface ActivitiesHook {\n  dailyActivities: Activity[];\n  loading: {\n    dailyActivities: boolean;\n    delete: number | null;\n  };\n  refreshDailyActivities: (date: Date | string, employeeId: string | number) => Promise<void>;\n  handleDelete: (id: number, onSuccess?: () => void) => Promise<void>;\n}\n\n// Tipos para el hook de datos del formulario\nexport interface FormDataHook {\n  formData: FormData;\n  editingActivityId: number | null;\n  setFormData: React.Dispatch<React.SetStateAction<FormData>>;\n  setEditingActivityId: React.Dispatch<React.SetStateAction<number | null>>;\n  handleChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n  resetForm: () => void;\n  handleEditActivity: (activity: Activity) => Promise<void>;\n}\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}