{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nimport { getDailyActivities, deleteHour } from '../../../api/horasApi';\nimport { toast } from 'sonner';\nexport const useActivities = (employeeId, selectedDate, refreshDeps = []) => {\n  _s();\n  const [dailyActivities, setDailyActivities] = useState([]);\n  const [loading, setLoading] = useState({\n    dailyActivities: true,\n    delete: null\n  });\n  const refreshDailyActivities = useCallback(async (date, empId) => {\n    try {\n      setLoading(prev => ({\n        ...prev,\n        dailyActivities: true\n      }));\n      const activities = await getDailyActivities(date, empId);\n      setDailyActivities(activities);\n    } catch (error) {\n      console.error('Error al cargar actividades:', error);\n      toast.error('Error al cargar las actividades del día');\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        dailyActivities: false\n      }));\n    }\n  }, []);\n  const handleDelete = useCallback(async (idToDelete, onSuccess) => {\n    try {\n      setLoading(prev => ({\n        ...prev,\n        delete: idToDelete\n      }));\n      const toastId = toast.loading('Eliminando actividad...');\n      await deleteHour(idToDelete);\n\n      // Actualizar la lista de actividades\n      await refreshDailyActivities(selectedDate, String(employeeId));\n\n      // Mostrar mensaje de éxito\n      toast.success('Actividad eliminada correctamente', {\n        id: toastId,\n        duration: 3000\n      });\n      if (onSuccess) onSuccess();\n    } catch (error) {\n      console.error('Error al eliminar la actividad:', error);\n      toast.error('Error al eliminar la actividad. Por favor, intente nuevamente.', {\n        duration: 4000\n      });\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        delete: null\n      }));\n    }\n  }, [employeeId, selectedDate, refreshDailyActivities]);\n\n  // Efecto para cargar las actividades cuando cambia la fecha o el empleado\n  useEffect(() => {\n    const dateStr = selectedDate instanceof Date ? selectedDate.toISOString().split('T')[0] : selectedDate;\n    refreshDailyActivities(dateStr, String(employeeId));\n  }, [selectedDate, employeeId, refreshDailyActivities, ...refreshDeps]);\n  return {\n    dailyActivities,\n    loading,\n    refreshDailyActivities,\n    handleDelete\n  };\n};\n_s(useActivities, \"YLwDK60zMbj8JHfBJPnnjK68i4E=\");","map":{"version":3,"names":["useState","useCallback","useEffect","getDailyActivities","deleteHour","toast","useActivities","employeeId","selectedDate","refreshDeps","_s","dailyActivities","setDailyActivities","loading","setLoading","delete","refreshDailyActivities","date","empId","prev","activities","error","console","handleDelete","idToDelete","onSuccess","toastId","String","success","id","duration","dateStr","Date","toISOString","split"],"sources":["D:/formulario de horas/FormularioHoras Version 1/frontend/src/components/formulario/hooks/useActivities.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { Activity, LoadingState } from '../types';\nimport { getDailyActivities, deleteHour } from '../../../api/horasApi';\nimport { toast } from 'sonner';\n\ninterface UseActivitiesReturn {\n  dailyActivities: Activity[];\n  loading: {\n    dailyActivities: boolean;\n    delete: number | null;\n  };\n  refreshDailyActivities: (date: Date | string, empId: string | number) => Promise<void>;\n  handleDelete: (idToDelete: number, onSuccess?: () => void) => Promise<void>;\n}\n\nexport const useActivities = (\n  employeeId: number, \n  selectedDate: Date, \n  refreshDeps: any[] = []\n): UseActivitiesReturn => {\n  const [dailyActivities, setDailyActivities] = useState<Activity[]>([]);\n  const [loading, setLoading] = useState({\n    dailyActivities: true,\n    delete: null as number | null,\n  });\n\n  const refreshDailyActivities = useCallback(async (date: Date | string, empId: string | number) => {\n    try {\n      setLoading(prev => ({ ...prev, dailyActivities: true }));\n      const activities = await getDailyActivities(date, empId);\n      setDailyActivities(activities);\n    } catch (error) {\n      console.error('Error al cargar actividades:', error);\n      toast.error('Error al cargar las actividades del día');\n    } finally {\n      setLoading(prev => ({ ...prev, dailyActivities: false }));\n    }\n  }, []);\n\n  const handleDelete = useCallback(async (idToDelete: number, onSuccess?: () => void) => {\n    try {\n      setLoading(prev => ({ ...prev, delete: idToDelete }));\n      const toastId = toast.loading('Eliminando actividad...');\n      \n      await deleteHour(idToDelete);\n      \n      // Actualizar la lista de actividades\n      await refreshDailyActivities(selectedDate, String(employeeId));\n      \n      // Mostrar mensaje de éxito\n      toast.success('Actividad eliminada correctamente', { \n        id: toastId,\n        duration: 3000,\n      });\n      \n      if (onSuccess) onSuccess();\n      \n    } catch (error) {\n      console.error('Error al eliminar la actividad:', error);\n      toast.error('Error al eliminar la actividad. Por favor, intente nuevamente.', { \n        duration: 4000,\n      });\n    } finally {\n      setLoading(prev => ({ ...prev, delete: null }));\n    }\n  }, [employeeId, selectedDate, refreshDailyActivities]);\n\n  // Efecto para cargar las actividades cuando cambia la fecha o el empleado\n  useEffect(() => {\n    const dateStr = selectedDate instanceof Date ? selectedDate.toISOString().split('T')[0] : selectedDate;\n    refreshDailyActivities(dateStr, String(employeeId));\n  }, [selectedDate, employeeId, refreshDailyActivities, ...refreshDeps]);\n\n  return {\n    dailyActivities,\n    loading,\n    refreshDailyActivities,\n    handleDelete,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}