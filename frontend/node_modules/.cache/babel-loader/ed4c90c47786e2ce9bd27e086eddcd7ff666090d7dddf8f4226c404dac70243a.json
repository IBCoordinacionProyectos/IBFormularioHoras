{"ast":null,"code":"import { DayFlag } from \"../UI.js\";\nvar FocusTargetPriority;\n(function (FocusTargetPriority) {\n  FocusTargetPriority[FocusTargetPriority[\"Today\"] = 0] = \"Today\";\n  FocusTargetPriority[FocusTargetPriority[\"Selected\"] = 1] = \"Selected\";\n  FocusTargetPriority[FocusTargetPriority[\"LastFocused\"] = 2] = \"LastFocused\";\n  FocusTargetPriority[FocusTargetPriority[\"FocusedModifier\"] = 3] = \"FocusedModifier\";\n})(FocusTargetPriority || (FocusTargetPriority = {}));\n/**\n * Determines if a day is focusable based on its modifiers.\n *\n * A day is considered focusable if it is not disabled, hidden, or outside the\n * displayed month.\n *\n * @param modifiers The modifiers applied to the day.\n * @returns `true` if the day is focusable, otherwise `false`.\n */\nfunction isFocusableDay(modifiers) {\n  return !modifiers[DayFlag.disabled] && !modifiers[DayFlag.hidden] && !modifiers[DayFlag.outside];\n}\n/**\n * Calculates the focus target day based on priority.\n *\n * This function determines the day that should receive focus in the calendar,\n * prioritizing days with specific modifiers (e.g., \"focused\", \"today\") or\n * selection states.\n *\n * @param days The array of `CalendarDay` objects to evaluate.\n * @param getModifiers A function to retrieve the modifiers for a given day.\n * @param isSelected A function to determine if a day is selected.\n * @param lastFocused The last focused day, if any.\n * @returns The `CalendarDay` that should receive focus, or `undefined` if no\n *   focusable day is found.\n */\nexport function calculateFocusTarget(days, getModifiers, isSelected, lastFocused) {\n  let focusTarget;\n  let foundFocusTargetPriority = -1;\n  for (const day of days) {\n    const modifiers = getModifiers(day);\n    if (isFocusableDay(modifiers)) {\n      if (modifiers[DayFlag.focused] && foundFocusTargetPriority < FocusTargetPriority.FocusedModifier) {\n        focusTarget = day;\n        foundFocusTargetPriority = FocusTargetPriority.FocusedModifier;\n      } else if (lastFocused !== null && lastFocused !== void 0 && lastFocused.isEqualTo(day) && foundFocusTargetPriority < FocusTargetPriority.LastFocused) {\n        focusTarget = day;\n        foundFocusTargetPriority = FocusTargetPriority.LastFocused;\n      } else if (isSelected(day.date) && foundFocusTargetPriority < FocusTargetPriority.Selected) {\n        focusTarget = day;\n        foundFocusTargetPriority = FocusTargetPriority.Selected;\n      } else if (modifiers[DayFlag.today] && foundFocusTargetPriority < FocusTargetPriority.Today) {\n        focusTarget = day;\n        foundFocusTargetPriority = FocusTargetPriority.Today;\n      }\n    }\n  }\n  if (!focusTarget) {\n    // Return the first day that is focusable\n    focusTarget = days.find(day => isFocusableDay(getModifiers(day)));\n  }\n  return focusTarget;\n}","map":{"version":3,"names":["DayFlag","FocusTargetPriority","isFocusableDay","modifiers","disabled","hidden","outside","calculateFocusTarget","days","getModifiers","isSelected","lastFocused","focusTarget","foundFocusTargetPriority","day","focused","FocusedModifier","isEqualTo","LastFocused","date","Selected","today","Today","find"],"sources":["D:/formulario de horas/FormularioHoras Version 1/frontend/node_modules/react-day-picker/dist/esm/helpers/calculateFocusTarget.js"],"sourcesContent":["import { DayFlag } from \"../UI.js\";\nvar FocusTargetPriority;\n(function (FocusTargetPriority) {\n    FocusTargetPriority[FocusTargetPriority[\"Today\"] = 0] = \"Today\";\n    FocusTargetPriority[FocusTargetPriority[\"Selected\"] = 1] = \"Selected\";\n    FocusTargetPriority[FocusTargetPriority[\"LastFocused\"] = 2] = \"LastFocused\";\n    FocusTargetPriority[FocusTargetPriority[\"FocusedModifier\"] = 3] = \"FocusedModifier\";\n})(FocusTargetPriority || (FocusTargetPriority = {}));\n/**\n * Determines if a day is focusable based on its modifiers.\n *\n * A day is considered focusable if it is not disabled, hidden, or outside the\n * displayed month.\n *\n * @param modifiers The modifiers applied to the day.\n * @returns `true` if the day is focusable, otherwise `false`.\n */\nfunction isFocusableDay(modifiers) {\n    return (!modifiers[DayFlag.disabled] &&\n        !modifiers[DayFlag.hidden] &&\n        !modifiers[DayFlag.outside]);\n}\n/**\n * Calculates the focus target day based on priority.\n *\n * This function determines the day that should receive focus in the calendar,\n * prioritizing days with specific modifiers (e.g., \"focused\", \"today\") or\n * selection states.\n *\n * @param days The array of `CalendarDay` objects to evaluate.\n * @param getModifiers A function to retrieve the modifiers for a given day.\n * @param isSelected A function to determine if a day is selected.\n * @param lastFocused The last focused day, if any.\n * @returns The `CalendarDay` that should receive focus, or `undefined` if no\n *   focusable day is found.\n */\nexport function calculateFocusTarget(days, getModifiers, isSelected, lastFocused) {\n    let focusTarget;\n    let foundFocusTargetPriority = -1;\n    for (const day of days) {\n        const modifiers = getModifiers(day);\n        if (isFocusableDay(modifiers)) {\n            if (modifiers[DayFlag.focused] &&\n                foundFocusTargetPriority < FocusTargetPriority.FocusedModifier) {\n                focusTarget = day;\n                foundFocusTargetPriority = FocusTargetPriority.FocusedModifier;\n            }\n            else if (lastFocused?.isEqualTo(day) &&\n                foundFocusTargetPriority < FocusTargetPriority.LastFocused) {\n                focusTarget = day;\n                foundFocusTargetPriority = FocusTargetPriority.LastFocused;\n            }\n            else if (isSelected(day.date) &&\n                foundFocusTargetPriority < FocusTargetPriority.Selected) {\n                focusTarget = day;\n                foundFocusTargetPriority = FocusTargetPriority.Selected;\n            }\n            else if (modifiers[DayFlag.today] &&\n                foundFocusTargetPriority < FocusTargetPriority.Today) {\n                focusTarget = day;\n                foundFocusTargetPriority = FocusTargetPriority.Today;\n            }\n        }\n    }\n    if (!focusTarget) {\n        // Return the first day that is focusable\n        focusTarget = days.find((day) => isFocusableDay(getModifiers(day)));\n    }\n    return focusTarget;\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,UAAU;AAClC,IAAIC,mBAAmB;AACvB,CAAC,UAAUA,mBAAmB,EAAE;EAC5BA,mBAAmB,CAACA,mBAAmB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;EAC/DA,mBAAmB,CAACA,mBAAmB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU;EACrEA,mBAAmB,CAACA,mBAAmB,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,aAAa;EAC3EA,mBAAmB,CAACA,mBAAmB,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,GAAG,iBAAiB;AACvF,CAAC,EAAEA,mBAAmB,KAAKA,mBAAmB,GAAG,CAAC,CAAC,CAAC,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,SAAS,EAAE;EAC/B,OAAQ,CAACA,SAAS,CAACH,OAAO,CAACI,QAAQ,CAAC,IAChC,CAACD,SAAS,CAACH,OAAO,CAACK,MAAM,CAAC,IAC1B,CAACF,SAAS,CAACH,OAAO,CAACM,OAAO,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAACC,IAAI,EAAEC,YAAY,EAAEC,UAAU,EAAEC,WAAW,EAAE;EAC9E,IAAIC,WAAW;EACf,IAAIC,wBAAwB,GAAG,CAAC,CAAC;EACjC,KAAK,MAAMC,GAAG,IAAIN,IAAI,EAAE;IACpB,MAAML,SAAS,GAAGM,YAAY,CAACK,GAAG,CAAC;IACnC,IAAIZ,cAAc,CAACC,SAAS,CAAC,EAAE;MAC3B,IAAIA,SAAS,CAACH,OAAO,CAACe,OAAO,CAAC,IAC1BF,wBAAwB,GAAGZ,mBAAmB,CAACe,eAAe,EAAE;QAChEJ,WAAW,GAAGE,GAAG;QACjBD,wBAAwB,GAAGZ,mBAAmB,CAACe,eAAe;MAClE,CAAC,MACI,IAAIL,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAEM,SAAS,CAACH,GAAG,CAAC,IAChCD,wBAAwB,GAAGZ,mBAAmB,CAACiB,WAAW,EAAE;QAC5DN,WAAW,GAAGE,GAAG;QACjBD,wBAAwB,GAAGZ,mBAAmB,CAACiB,WAAW;MAC9D,CAAC,MACI,IAAIR,UAAU,CAACI,GAAG,CAACK,IAAI,CAAC,IACzBN,wBAAwB,GAAGZ,mBAAmB,CAACmB,QAAQ,EAAE;QACzDR,WAAW,GAAGE,GAAG;QACjBD,wBAAwB,GAAGZ,mBAAmB,CAACmB,QAAQ;MAC3D,CAAC,MACI,IAAIjB,SAAS,CAACH,OAAO,CAACqB,KAAK,CAAC,IAC7BR,wBAAwB,GAAGZ,mBAAmB,CAACqB,KAAK,EAAE;QACtDV,WAAW,GAAGE,GAAG;QACjBD,wBAAwB,GAAGZ,mBAAmB,CAACqB,KAAK;MACxD;IACJ;EACJ;EACA,IAAI,CAACV,WAAW,EAAE;IACd;IACAA,WAAW,GAAGJ,IAAI,CAACe,IAAI,CAAET,GAAG,IAAKZ,cAAc,CAACO,YAAY,CAACK,GAAG,CAAC,CAAC,CAAC;EACvE;EACA,OAAOF,WAAW;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}