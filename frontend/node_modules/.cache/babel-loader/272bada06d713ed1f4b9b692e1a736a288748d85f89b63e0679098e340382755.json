{"ast":null,"code":"import { tzName } from \"../tzName/index.js\";\nimport { TZDateMini } from \"./mini.js\";\nexport class TZDate extends TZDateMini {\n  //#region static\n\n  static tz(tz, ...args) {\n    return args.length ? new TZDate(...args, tz) : new TZDate(Date.now(), tz);\n  }\n\n  //#endregion\n\n  //#region representation\n\n  toISOString() {\n    const [sign, hours, minutes] = this.tzComponents();\n    const tz = `${sign}${hours}:${minutes}`;\n    return this.internal.toISOString().slice(0, -1) + tz;\n  }\n  toString() {\n    // \"Tue Aug 13 2024 07:50:19 GMT+0800 (Singapore Standard Time)\";\n    return `${this.toDateString()} ${this.toTimeString()}`;\n  }\n  toDateString() {\n    // toUTCString returns RFC 7231 (\"Mon, 12 Aug 2024 23:36:08 GMT\")\n    const [day, date, month, year] = this.internal.toUTCString().split(\" \");\n    // \"Tue Aug 13 2024\"\n    return `${day?.slice(0, -1) /* Remove \",\" */} ${month} ${date} ${year}`;\n  }\n  toTimeString() {\n    // toUTCString returns RFC 7231 (\"Mon, 12 Aug 2024 23:36:08 GMT\")\n    const time = this.internal.toUTCString().split(\" \")[4];\n    const [sign, hours, minutes] = this.tzComponents();\n    // \"07:42:23 GMT+0800 (Singapore Standard Time)\"\n    return `${time} GMT${sign}${hours}${minutes} (${tzName(this.timeZone, this)})`;\n  }\n  toLocaleString(locales, options) {\n    return Date.prototype.toLocaleString.call(this, locales, {\n      ...options,\n      timeZone: options?.timeZone || this.timeZone\n    });\n  }\n  toLocaleDateString(locales, options) {\n    return Date.prototype.toLocaleDateString.call(this, locales, {\n      ...options,\n      timeZone: options?.timeZone || this.timeZone\n    });\n  }\n  toLocaleTimeString(locales, options) {\n    return Date.prototype.toLocaleTimeString.call(this, locales, {\n      ...options,\n      timeZone: options?.timeZone || this.timeZone\n    });\n  }\n\n  //#endregion\n\n  //#region private\n\n  tzComponents() {\n    const offset = this.getTimezoneOffset();\n    const sign = offset > 0 ? \"-\" : \"+\";\n    const hours = String(Math.floor(Math.abs(offset) / 60)).padStart(2, \"0\");\n    const minutes = String(Math.abs(offset) % 60).padStart(2, \"0\");\n    return [sign, hours, minutes];\n  }\n\n  //#endregion\n\n  withTimeZone(timeZone) {\n    return new TZDate(+this, timeZone);\n  }\n\n  //#region date-fns integration\n\n  [Symbol.for(\"constructDateFrom\")](date) {\n    return new TZDate(+new Date(date), this.timeZone);\n  }\n\n  //#endregion\n}","map":{"version":3,"names":["tzName","TZDateMini","TZDate","tz","args","length","Date","now","toISOString","sign","hours","minutes","tzComponents","internal","slice","toString","toDateString","toTimeString","day","date","month","year","toUTCString","split","time","timeZone","toLocaleString","locales","options","prototype","call","toLocaleDateString","toLocaleTimeString","offset","getTimezoneOffset","String","Math","floor","abs","padStart","withTimeZone","Symbol","for"],"sources":["D:/formulario de horas/FormularioHoras Version 1/frontend/node_modules/@date-fns/tz/date/index.js"],"sourcesContent":["import { tzName } from \"../tzName/index.js\";\nimport { TZDateMini } from \"./mini.js\";\nexport class TZDate extends TZDateMini {\n  //#region static\n\n  static tz(tz, ...args) {\n    return args.length ? new TZDate(...args, tz) : new TZDate(Date.now(), tz);\n  }\n\n  //#endregion\n\n  //#region representation\n\n  toISOString() {\n    const [sign, hours, minutes] = this.tzComponents();\n    const tz = `${sign}${hours}:${minutes}`;\n    return this.internal.toISOString().slice(0, -1) + tz;\n  }\n  toString() {\n    // \"Tue Aug 13 2024 07:50:19 GMT+0800 (Singapore Standard Time)\";\n    return `${this.toDateString()} ${this.toTimeString()}`;\n  }\n  toDateString() {\n    // toUTCString returns RFC 7231 (\"Mon, 12 Aug 2024 23:36:08 GMT\")\n    const [day, date, month, year] = this.internal.toUTCString().split(\" \");\n    // \"Tue Aug 13 2024\"\n    return `${day?.slice(0, -1) /* Remove \",\" */} ${month} ${date} ${year}`;\n  }\n  toTimeString() {\n    // toUTCString returns RFC 7231 (\"Mon, 12 Aug 2024 23:36:08 GMT\")\n    const time = this.internal.toUTCString().split(\" \")[4];\n    const [sign, hours, minutes] = this.tzComponents();\n    // \"07:42:23 GMT+0800 (Singapore Standard Time)\"\n    return `${time} GMT${sign}${hours}${minutes} (${tzName(this.timeZone, this)})`;\n  }\n  toLocaleString(locales, options) {\n    return Date.prototype.toLocaleString.call(this, locales, {\n      ...options,\n      timeZone: options?.timeZone || this.timeZone\n    });\n  }\n  toLocaleDateString(locales, options) {\n    return Date.prototype.toLocaleDateString.call(this, locales, {\n      ...options,\n      timeZone: options?.timeZone || this.timeZone\n    });\n  }\n  toLocaleTimeString(locales, options) {\n    return Date.prototype.toLocaleTimeString.call(this, locales, {\n      ...options,\n      timeZone: options?.timeZone || this.timeZone\n    });\n  }\n\n  //#endregion\n\n  //#region private\n\n  tzComponents() {\n    const offset = this.getTimezoneOffset();\n    const sign = offset > 0 ? \"-\" : \"+\";\n    const hours = String(Math.floor(Math.abs(offset) / 60)).padStart(2, \"0\");\n    const minutes = String(Math.abs(offset) % 60).padStart(2, \"0\");\n    return [sign, hours, minutes];\n  }\n\n  //#endregion\n\n  withTimeZone(timeZone) {\n    return new TZDate(+this, timeZone);\n  }\n\n  //#region date-fns integration\n\n  [Symbol.for(\"constructDateFrom\")](date) {\n    return new TZDate(+new Date(date), this.timeZone);\n  }\n\n  //#endregion\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}