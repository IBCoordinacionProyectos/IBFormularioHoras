{"ast":null,"code":"/**\n * Returns the months to show in the dropdown.\n *\n * This function generates a list of months for the current year, formatted\n * using the provided formatter, and determines whether each month should be\n * disabled based on the navigation range.\n *\n * @param displayMonth The currently displayed month.\n * @param navStart The start date for navigation.\n * @param navEnd The end date for navigation.\n * @param formatters The formatters to use for formatting the month labels.\n * @param dateLib The date library to use for date manipulation.\n * @returns An array of dropdown options representing the months, or `undefined`\n *   if no months are available.\n */\nexport function getMonthOptions(displayMonth, navStart, navEnd, formatters, dateLib) {\n  const {\n    startOfMonth,\n    startOfYear,\n    endOfYear,\n    eachMonthOfInterval,\n    getMonth\n  } = dateLib;\n  const months = eachMonthOfInterval({\n    start: startOfYear(displayMonth),\n    end: endOfYear(displayMonth)\n  });\n  const options = months.map(month => {\n    const label = formatters.formatMonthDropdown(month, dateLib);\n    const value = getMonth(month);\n    const disabled = navStart && month < startOfMonth(navStart) || navEnd && month > startOfMonth(navEnd) || false;\n    return {\n      value,\n      label,\n      disabled\n    };\n  });\n  return options;\n}","map":{"version":3,"names":["getMonthOptions","displayMonth","navStart","navEnd","formatters","dateLib","startOfMonth","startOfYear","endOfYear","eachMonthOfInterval","getMonth","months","start","end","options","map","month","label","formatMonthDropdown","value","disabled"],"sources":["D:/formulario de horas/FormularioHoras Version 1/frontend/node_modules/react-day-picker/dist/esm/helpers/getMonthOptions.js"],"sourcesContent":["/**\n * Returns the months to show in the dropdown.\n *\n * This function generates a list of months for the current year, formatted\n * using the provided formatter, and determines whether each month should be\n * disabled based on the navigation range.\n *\n * @param displayMonth The currently displayed month.\n * @param navStart The start date for navigation.\n * @param navEnd The end date for navigation.\n * @param formatters The formatters to use for formatting the month labels.\n * @param dateLib The date library to use for date manipulation.\n * @returns An array of dropdown options representing the months, or `undefined`\n *   if no months are available.\n */\nexport function getMonthOptions(displayMonth, navStart, navEnd, formatters, dateLib) {\n    const { startOfMonth, startOfYear, endOfYear, eachMonthOfInterval, getMonth, } = dateLib;\n    const months = eachMonthOfInterval({\n        start: startOfYear(displayMonth),\n        end: endOfYear(displayMonth),\n    });\n    const options = months.map((month) => {\n        const label = formatters.formatMonthDropdown(month, dateLib);\n        const value = getMonth(month);\n        const disabled = (navStart && month < startOfMonth(navStart)) ||\n            (navEnd && month > startOfMonth(navEnd)) ||\n            false;\n        return { value, label, disabled };\n    });\n    return options;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAeA,CAACC,YAAY,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAE;EACjF,MAAM;IAAEC,YAAY;IAAEC,WAAW;IAAEC,SAAS;IAAEC,mBAAmB;IAAEC;EAAU,CAAC,GAAGL,OAAO;EACxF,MAAMM,MAAM,GAAGF,mBAAmB,CAAC;IAC/BG,KAAK,EAAEL,WAAW,CAACN,YAAY,CAAC;IAChCY,GAAG,EAAEL,SAAS,CAACP,YAAY;EAC/B,CAAC,CAAC;EACF,MAAMa,OAAO,GAAGH,MAAM,CAACI,GAAG,CAAEC,KAAK,IAAK;IAClC,MAAMC,KAAK,GAAGb,UAAU,CAACc,mBAAmB,CAACF,KAAK,EAAEX,OAAO,CAAC;IAC5D,MAAMc,KAAK,GAAGT,QAAQ,CAACM,KAAK,CAAC;IAC7B,MAAMI,QAAQ,GAAIlB,QAAQ,IAAIc,KAAK,GAAGV,YAAY,CAACJ,QAAQ,CAAC,IACvDC,MAAM,IAAIa,KAAK,GAAGV,YAAY,CAACH,MAAM,CAAE,IACxC,KAAK;IACT,OAAO;MAAEgB,KAAK;MAAEF,KAAK;MAAEG;IAAS,CAAC;EACrC,CAAC,CAAC;EACF,OAAON,OAAO;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}