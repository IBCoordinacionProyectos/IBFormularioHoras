{"ast":null,"code":"const offsetFormatCache = {};\nconst offsetCache = {};\n\n/**\n * The function extracts UTC offset in minutes from the given date in specified\n * time zone.\n *\n * Unlike `Date.prototype.getTimezoneOffset`, this function returns the value\n * mirrored to the sign of the offset in the time zone. For Asia/Singapore\n * (UTC+8), `tzOffset` returns 480, while `getTimezoneOffset` returns -480.\n *\n * @param timeZone - Time zone name (IANA or UTC offset)\n * @param date - Date to check the offset for\n *\n * @returns UTC offset in minutes\n */\nexport function tzOffset(timeZone, date) {\n  try {\n    const format = offsetFormatCache[timeZone] ||= new Intl.DateTimeFormat(\"en-US\", {\n      timeZone,\n      timeZoneName: \"longOffset\"\n    }).format;\n    const offsetStr = format(date).split(\"GMT\")[1];\n    if (offsetStr in offsetCache) return offsetCache[offsetStr];\n    return calcOffset(offsetStr, offsetStr.split(\":\"));\n  } catch {\n    // Fallback to manual parsing if the runtime doesn't support ±HH:MM/±HHMM/±HH\n    // See: https://github.com/nodejs/node/issues/53419\n    if (timeZone in offsetCache) return offsetCache[timeZone];\n    const captures = timeZone?.match(offsetRe);\n    if (captures) return calcOffset(timeZone, captures.slice(1));\n    return NaN;\n  }\n}\nconst offsetRe = /([+-]\\d\\d):?(\\d\\d)?/;\nfunction calcOffset(cacheStr, values) {\n  const hours = +(values[0] || 0);\n  const minutes = +(values[1] || 0);\n  // Convert seconds to minutes by dividing by 60 to keep the function return in minutes.\n  const seconds = +(values[2] || 0) / 60;\n  return offsetCache[cacheStr] = hours * 60 + minutes > 0 ? hours * 60 + minutes + seconds : hours * 60 - minutes - seconds;\n}","map":{"version":3,"names":["offsetFormatCache","offsetCache","tzOffset","timeZone","date","format","Intl","DateTimeFormat","timeZoneName","offsetStr","split","calcOffset","captures","match","offsetRe","slice","NaN","cacheStr","values","hours","minutes","seconds"],"sources":["D:/formulario de horas/FormularioHoras Version 1/frontend/node_modules/@date-fns/tz/tzOffset/index.js"],"sourcesContent":["const offsetFormatCache = {};\nconst offsetCache = {};\n\n/**\n * The function extracts UTC offset in minutes from the given date in specified\n * time zone.\n *\n * Unlike `Date.prototype.getTimezoneOffset`, this function returns the value\n * mirrored to the sign of the offset in the time zone. For Asia/Singapore\n * (UTC+8), `tzOffset` returns 480, while `getTimezoneOffset` returns -480.\n *\n * @param timeZone - Time zone name (IANA or UTC offset)\n * @param date - Date to check the offset for\n *\n * @returns UTC offset in minutes\n */\nexport function tzOffset(timeZone, date) {\n  try {\n    const format = offsetFormatCache[timeZone] ||= new Intl.DateTimeFormat(\"en-US\", {\n      timeZone,\n      timeZoneName: \"longOffset\"\n    }).format;\n    const offsetStr = format(date).split(\"GMT\")[1];\n    if (offsetStr in offsetCache) return offsetCache[offsetStr];\n    return calcOffset(offsetStr, offsetStr.split(\":\"));\n  } catch {\n    // Fallback to manual parsing if the runtime doesn't support ±HH:MM/±HHMM/±HH\n    // See: https://github.com/nodejs/node/issues/53419\n    if (timeZone in offsetCache) return offsetCache[timeZone];\n    const captures = timeZone?.match(offsetRe);\n    if (captures) return calcOffset(timeZone, captures.slice(1));\n    return NaN;\n  }\n}\nconst offsetRe = /([+-]\\d\\d):?(\\d\\d)?/;\nfunction calcOffset(cacheStr, values) {\n  const hours = +(values[0] || 0);\n  const minutes = +(values[1] || 0);\n  // Convert seconds to minutes by dividing by 60 to keep the function return in minutes.\n  const seconds = +(values[2] || 0) / 60;\n  return offsetCache[cacheStr] = hours * 60 + minutes > 0 ? hours * 60 + minutes + seconds : hours * 60 - minutes - seconds;\n}"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,CAAC,CAAC;AAC5B,MAAMC,WAAW,GAAG,CAAC,CAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,QAAQ,EAAEC,IAAI,EAAE;EACvC,IAAI;IACF,MAAMC,MAAM,GAAGL,iBAAiB,CAACG,QAAQ,CAAC,KAAK,IAAIG,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;MAC9EJ,QAAQ;MACRK,YAAY,EAAE;IAChB,CAAC,CAAC,CAACH,MAAM;IACT,MAAMI,SAAS,GAAGJ,MAAM,CAACD,IAAI,CAAC,CAACM,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAID,SAAS,IAAIR,WAAW,EAAE,OAAOA,WAAW,CAACQ,SAAS,CAAC;IAC3D,OAAOE,UAAU,CAACF,SAAS,EAAEA,SAAS,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC;EACpD,CAAC,CAAC,MAAM;IACN;IACA;IACA,IAAIP,QAAQ,IAAIF,WAAW,EAAE,OAAOA,WAAW,CAACE,QAAQ,CAAC;IACzD,MAAMS,QAAQ,GAAGT,QAAQ,EAAEU,KAAK,CAACC,QAAQ,CAAC;IAC1C,IAAIF,QAAQ,EAAE,OAAOD,UAAU,CAACR,QAAQ,EAAES,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5D,OAAOC,GAAG;EACZ;AACF;AACA,MAAMF,QAAQ,GAAG,qBAAqB;AACtC,SAASH,UAAUA,CAACM,QAAQ,EAAEC,MAAM,EAAE;EACpC,MAAMC,KAAK,GAAG,EAAED,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;EAC/B,MAAME,OAAO,GAAG,EAAEF,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;EACjC;EACA,MAAMG,OAAO,GAAG,EAAEH,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE;EACtC,OAAOjB,WAAW,CAACgB,QAAQ,CAAC,GAAGE,KAAK,GAAG,EAAE,GAAGC,OAAO,GAAG,CAAC,GAAGD,KAAK,GAAG,EAAE,GAAGC,OAAO,GAAGC,OAAO,GAAGF,KAAK,GAAG,EAAE,GAAGC,OAAO,GAAGC,OAAO;AAC3H","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}